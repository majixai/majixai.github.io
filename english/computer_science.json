[
    // ... (All 14 CS lessons from the previous response) ...
     {
        "title": "CS: Array vs. Linked List",
        "content": "<h3>Concept: Linear Data Structures</h3><p>Two fundamental ways to store a sequence of elements.</p><h3>Array:</h3><ul><li>Stores elements in a <strong>contiguous block of memory</strong>.</li><li><strong>Access:</strong> O(1) - Direct access by index (<code>arr[i]</code>) is very fast.</li><li><strong>Insertion/Deletion (Middle):</strong> O(n) - Slow, requires shifting subsequent elements.</li><li><strong>Memory:</strong> Fixed size (often) or requires reallocation if dynamic.</li></ul><h3>Linked List:</h3><ul><li>Stores elements as <strong>nodes</strong>, each containing data and a pointer/reference to the next node. Nodes can be scattered in memory.</li><li><strong>Access:</strong> O(n) - Must traverse the list from the head to reach an element by position.</li><li><strong>Insertion/Deletion (Known Position/Node):</strong> O(1) - Fast, only requires updating pointers of adjacent nodes.</li><li><strong>Memory:</strong> Dynamic size, memory overhead per node (for the pointer).</li></ul><h3>Takeaway:</h3><p>Choose arrays for fast random access. Choose linked lists for frequent insertions/deletions in the middle of the sequence.</p>"
    }
]
